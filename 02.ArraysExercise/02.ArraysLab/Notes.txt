Summary of the Mutator Methods
-Pop - removes element from the END of the array.
-Push - add an element ot the END of the array.

-Shift - removes the FIRST element of the array.
-Unshift - adds element at the FIRST position of the array.

-Splice - Adds or replaces elements 
=> splice(start, deleteCount, item1)
-Fill - The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index
=> fill(value, start, end)
=> fill(value, start)
=> fill(value)
-Reverse - reverses elements in an array.

nums.sort((a, b) => a - b) => ascending order
nums.sort((a, b) => b - a) => descending order

words.sort((a, b) => a.localeCompare(b)); 
=> string compare method, regardless of the case.

-Join - concats all elements in an array and returns string 
join(separator)

-Concat - merges two or more arrays - returns new array
concat(value0, value1)

-Slice - returns a shallow copy of a portion of the array into a new array object
slice()
slice(start)
slice(start, end)

-Includes - searches the array for certain element, returning "true" or "false";
includes(searchElement)
includes(searchElement, fromIndex)

-IndexOf - returns the first index that a given element can be found. Output is "-1" if the element is not present
indexOf(searchElement)
indexOf(searchElement, fromIndex)

Iteration Methods.
-forEach() - executes a function for each element in the array

-Some() - returns a boolean value. Checks wether 1 element in the array passes the given function. - NEEDS TO BE A FUNCTION.

-Find() - returns the FIRST VALUE of the array, that matches the function OR UNDEFINED if none of them do.

-Filter() - creates a NEW ARRAY with all elements that pass the test implemented by the provided function.

-Map() - creates a new array populated with the results of calling a provided function on every element in the calling array.
--> NEEDS TO BE EXECUTED ON ALL.


Reducing arrays

-reduce() - executes a reducer function on each element of the array, resulting in a single output value.
reduce(function(previousValue, currentValue) { /* ... */ })
